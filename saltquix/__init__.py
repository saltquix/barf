
import struct, math

nes_colors = (
    (0x78, 0x80, 0x84), # 00
    (0x00, 0x00, 0xFC), # 01
    (0x00, 0x00, 0xC4), # 02
    (0x40, 0x28, 0xC4), # 03
    (0x94, 0x00, 0x8C), # 04
    (0xAC, 0x00, 0x28), # 05
    (0xAC, 0x10, 0x00), # 06
    (0x8C, 0x18, 0x00), # 07
    (0x50, 0x39, 0x00), # 08
    (0x00, 0x78, 0x00), # 09
    (0x00, 0x68, 0x00), # 0A
    (0x00, 0x58, 0x00), # 0B
    (0x00, 0x40, 0x58), # 0C
    (0x00, 0x00, 0x00), # 0D
    (0x00, 0x00, 0x00), # 0E
    (0x00, 0x00, 0x00), # 0F

    (0xBF, 0xBF, 0xBF), # 10
    (0x00, 0x6F, 0xF0), # 11
    (0x00, 0x4F, 0xF0), # 12
    (0x60, 0x3F, 0xFF), # 13
    (0xDF, 0x00, 0xE3), # 14
    (0xE0, 0x00, 0x50), # 15
    (0xF0, 0x2F, 0x00), # 16
    (0xE0, 0x50, 0x0F), # 17
    (0xAF, 0x70, 0x00), # 18
    (0x00, 0xAF, 0x00), # 19
    (0x00, 0xAF, 0x00), # 1A
    (0x00, 0xAF, 0x3F), # 1B
    (0x00, 0x8F, 0x8F), # 1C
    (0x00, 0x00, 0x00), # 1D
    (0x00, 0x00, 0x00), # 1E
    (0x00, 0x00, 0x00), # 1F

    (0xF0, 0xF0, 0xF0), # 20
    (0x30, 0xBF, 0xFF), # 21
    (0x60, 0x80, 0xFF), # 22
    (0x90, 0x6F, 0xF0), # 23
    (0xF0, 0x6F, 0xF0), # 24
    (0xF0, 0x4F, 0x90), # 25
    (0xF0, 0x6F, 0x4F), # 26
    (0xFF, 0xA0, 0x3F), # 27
    (0xF0, 0x80, 0x00), # 28
    (0xB0, 0xF0, 0x0F), # 29
    (0x50, 0xDF, 0x4F), # 2A
    (0x4F, 0xF0, 0x90), # 2B
    (0x00, 0xEF, 0xE9), # 2C
    (0x6F, 0x6F, 0x6F), # 2D
    (0x00, 0x00, 0x00), # 2E
    (0x00, 0x00, 0x00), # 2F

    (0xFF, 0xFF, 0xFF), # 30
    (0xA0, 0xE0, 0xFF), # 31
    (0xB0, 0xB0, 0xF0), # 32
    (0xD0, 0xB0, 0xF0), # 33
    (0xF0, 0xB0, 0xF0), # 34
    (0xFF, 0xA0, 0xC0), # 35
    (0xEF, 0xCF, 0xAF), # 36
    (0xFF, 0xE0, 0xAF), # 37
    (0xE1, 0xDF, 0x70), # 38
    (0xD0, 0xF0, 0x6F), # 39
    (0xB0, 0xF0, 0xB0), # 3A
    (0xB0, 0xF0, 0xD0), # 3B
    (0x00, 0xFF, 0xFF), # 3C
    (0xF0, 0xD0, 0xF0), # 3D
    (0x00, 0x00, 0x00), # 3E
    (0x00, 0x00, 0x00) # 3F
)

def nes_color_to_hex(v):
  return '#%02X%02X%02X' % nes_colors[v]

def hex_to_nes_color(h):
  r,g,b = struct.unpack('BBB', str(h[1:]).decode('hex'))
  return min( ( (r2-r)**2 + (g2-g)**2 + (b2-b)**2  ,i) for i,(r2,g2,b2) in enumerate(nes_colors) )[1]
 